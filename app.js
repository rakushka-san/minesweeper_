import { Square } from './Square.js'

document.addEventListener('DOMContentLoaded', () => {
	const grid = document.querySelector('.grid')
	const flagsLeft = document.querySelector('#flags-left')
	const result = document.querySelector('#result')
	let width = 10
	let bombAmount = 20
	let flags = 0
	let squares = []
	let isGameOver = false

	let gameArray = []

	// –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
	function render() {
		flagsLeft.innerHTML = bombAmount

		// –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
		for (let i = 0; i < width * width; i++) {
			const square = document.createElement('div')
			square.setAttribute('id', i)
			square.classList.add('cell')
			grid.appendChild(square)
			squares.push(square)
		}

		// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏
		grid.addEventListener('click', function (e) {
			click(e.target)
		})

		// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏
		grid.oncontextmenu = function (e) {
			e.preventDefault()
			addFlag(e.target)
		}
	}

	// —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
	function createBoard() {
		// –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞, –æ—Ç—Ä–∞–∂–∞—é—â–µ–≥–æ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –∏ —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–æ–∂–µ–Ω–∏–∏ –±–æ–º–±
		const bombsArray = Array(bombAmount)
		for (let i = 0; i < bombsArray.length; i++) {
			bombsArray[i] = new Square(false)
		}
		const emptyArray = Array(width * width - bombAmount)
		for (let i = 0; i < emptyArray.length; i++) {
			emptyArray[i] = new Square(true)
		}
		gameArray = emptyArray.concat(bombsArray).sort(() => Math.random() - 0.5)

		for (let index = 0; index < gameArray.length; index++) {
			if (gameArray[index].isValid) {
				let count = 0

				const currentY = Math.floor(index / width)
				const currentX = index % width

				for (let i = -1; i <= 1; i++) {
					for (let j = -1; j <= 1; j++) {
						if (i === 0 && j === 0) continue

						const checkingY = currentY + i
						const checkingX = currentX + j

						if (checkingY < 0 || checkingY >= width) continue
						if (checkingX < 0 || checkingX >= width) continue

						const checkingIndex = checkingY * width + checkingX

						if (!gameArray[checkingIndex].isValid) {
							count++
						}
					}
				}

				gameArray[index].bombsAround = count
			}
		}
	}
	createBoard()
	render()

	// —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–º–µ—Ç–∫–∏ –∫–ª–µ—Ç–∫–∏ —Ñ–ª–∞–≥–æ–º
	function addFlag(square) {
		if (isGameOver) return
		if (!gameArray[square.id].isChecked && flags < bombAmount) {
			if (!gameArray[square.id].isFlagged) {
				gameArray[square.id].isFlagged = true
				square.innerHTML = ' üö©'
				flags++
				flagsLeft.innerHTML = bombAmount - flags
				checkForWin()
			} else {
				gameArray[square.id].isFlagged = false
				square.innerHTML = ''
				flags--
				flagsLeft.innerHTML = bombAmount - flags
			}
		}
	}

	// —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–ª–µ—Ç–∫–∏
	function click(square) {
		if (isGameOver) return
		if (gameArray[square.id].isChecked || gameArray[square.id].isFlagged) return
		if (!gameArray[square.id].isValid) {
			gameOver()
			return
		}
		let total = gameArray[square.id].bombsAround
		if (total != 0) {
			square.classList.add(`cell-${total}`)
			square.innerHTML = total

			square.classList.add('checked')
			gameArray[square.id].isChecked = true
			return
		}

		square.classList.add('checked')
		gameArray[square.id].isChecked = true
		checkSquare(square)
	}

	// —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–µ—Ç–æ–∫
	function checkSquare(square) {
		const currentY = Math.floor(square.id / width)
		const currentX = square.id % width

		for (let i = -1; i <= 1; i++) {
			for (let j = -1; j <= 1; j++) {
				if (i === 0 && j === 0) continue

				const checkingY = currentY + i
				const checkingX = currentX + j

				if (checkingY < 0 || checkingY >= width) continue
				if (checkingX < 0 || checkingX >= width) continue

				const checkingIndex = checkingY * width + checkingX
				click(squares[checkingIndex])
			}
		}
	}

	// —Ñ—É–Ω–∫—Ü–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
	function gameOver() {
		result.innerHTML = 'BOOM! Game Over!'
		isGameOver = true

		// –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –±–æ–º–±
		squares.forEach((square, index) => {
			if (!gameArray[index].isValid) {
				square.innerHTML = 'üí£'
			}
		})
	}

	// —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—è –Ω–∞ –≤—ã–∏–≥—Ä—ã—à
	function checkForWin() {
		let matches = 0
		// –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–∞–ª–∏—á–∏—è –±–æ–º–±—ã –∏ –æ—Ç–º–µ—Ç–∫–∏-—Ñ–ª–∞–≥–∞
		for (let i = 0; i < gameArray.length; i++) {
			if (gameArray[i].isFlagged && !gameArray[i].isValid) {
				matches++
			}
			if (matches === bombAmount) {
				result.innerHTML = 'YOU WIN!'
				isGameOver = true
			}
		}
	}
})
